<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { }.OH_footer { }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>User32.NativeMethods.GetKeyState Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="GetKeyState method" /><meta name="System.Keywords" content="User32.NativeMethods.GetKeyState method" /><meta name="Microsoft.Help.F1" content="SharpBlade.Native.WinAPI.User32.NativeMethods.GetKeyState" /><meta name="Microsoft.Help.Id" content="M:SharpBlade.Native.WinAPI.User32.NativeMethods.GetKeyState(System.Int32)" /><meta name="Description" content="Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off—alternating each time the key is pressed)." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="'true'" /><meta name="container" content="SharpBlade.Native.WinAPI" /><meta name="file" content="M_SharpBlade_Native_WinAPI_User32_NativeMethods_GetKeyState" /><meta name="guid" content="M_SharpBlade_Native_WinAPI_User32_NativeMethods_GetKeyState" /><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">User32<span id="ID0EDBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDBABAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>NativeMethods<span id="ID0EBBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBABAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>GetKeyState Method </td><td class="OH_tdRunningTitleColumn">SharpBlade documentation</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="summary">
            Retrieves the status of the specified virtual key.
            The status specifies whether the key is up, down,
            or toggled (on, off—alternating each time the key is pressed).
            </div><p></p><strong>Namespace:</strong> <a href="N_SharpBlade_Native_WinAPI.htm" target="">SharpBlade.Native.WinAPI</a><br /><strong>Assembly:</strong> <span sdata="assembly">SharpBlade</span> (in SharpBlade.dll) Version: 5.1.0 Stable<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EDHDAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EDHDAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EDHDAAAAA_tabimgleft"></div><div id="ID0EDHDAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EDHDAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EDHDAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EDHDAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EDHDAAAAA_tab3" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EDHDAAAAA','Visual C++','3','4');return false;">C++</a></div><div id="ID0EDHDAAAAA_tab4" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EDHDAAAAA','F#','4','4');return false;">F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EDHDAAAAA_tabimgright"></div></div><div id="ID0EDHDAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDHDAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EDHDAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EDHDAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EDHDAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EDHDAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EDHDAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EDHDAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre>[<span class="identifier">DllImportAttribute</span>("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
<span class="keyword">internal</span> <span class="keyword">static</span> <span class="identifier">short</span> <span class="identifier">GetKeyState</span>(
	<span class="identifier">int</span> <span class="parameter">keyCode</span>
)</pre></div><div id="ID0EDHDAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>[DllImportAttribute("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
internal static short GetKeyState(
	int keyCode
)</pre></div><div id="ID0EDHDAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>&lt;<span class="identifier">DllImportAttribute</span>("user32.dll", CharSet := CharSet.Auto, ExactSpelling := true&gt;]
<span class="keyword">Friend</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">GetKeyState</span> ( 
	<span class="parameter">keyCode</span> <span class="keyword">As</span> <span class="identifier">Integer</span>
) <span class="keyword">As</span> <span class="identifier">Short</span></pre></div><div id="ID0EDHDAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>&lt;DllImportAttribute("user32.dll", CharSet := CharSet.Auto, ExactSpelling := true&gt;]
Friend Shared Function GetKeyState ( 
	keyCode As Integer
) As Short</pre></div><div id="ID0EDHDAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="keyword">internal</span>:
[<span class="identifier">DllImportAttribute</span>(L"user32.dll", CharSet = CharSet::Auto, ExactSpelling = true)]
<span class="keyword">static</span> <span class="identifier">short</span> <span class="identifier">GetKeyState</span>(
	<span class="identifier">int</span> <span class="parameter">keyCode</span>
)</pre></div><div id="ID0EDHDAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre>internal:
[DllImportAttribute(L"user32.dll", CharSet = CharSet::Auto, ExactSpelling = true)]
static short GetKeyState(
	int keyCode
)</pre></div><div id="ID0EDHDAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre>[&lt;<span class="identifier">DllImportAttribute</span>("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)&gt;]
<span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">member</span> <span class="identifier">GetKeyState</span> : 
        <span class="parameter">keyCode</span> : <span class="identifier">int</span> <span class="keyword">-&gt;</span> <span class="identifier">int16</span></pre></div><div id="ID0EDHDAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre>[&lt;DllImportAttribute("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)&gt;]
internal static member GetKeyState : 
        keyCode : int -&gt; int16</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EDHDAAAAA');</script></div><div id="parameters"><h4 class="subHeading">Parameters</h4><dl paramName="keyCode"><dt><span class="parameter">keyCode</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/td2s409d" target="_blank">System<span id="ID0EBCAAGDAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBCAAGDAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Int32</a><br /><span>
            A virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9),
            <span class="code">nVirtKey</span> must be set to the ASCII value of that character. For other keys, it must be a virtual-key code.
            If a non-English keyboard layout is used, virtual keys with values in the range ASCII A through Z and 0
            through 9 are used to specify most of the character keys. For example, for the German keyboard layout,
            the virtual key of value ASCII O (0x4F) refers to the "o" key, whereas VK_OEM_1 refers to the "o with umlaut" key.
            </span></dd></dl></div><h4 class="subHeading">Return Value</h4>Type: <a href="http://msdn2.microsoft.com/en-us/library/e07e6fds" target="_blank">Int16</a><br />
            The return value specifies the status of the specified virtual key, as follows:
            <ul><li>If the high-order bit is 1, the key is down; otherwise, it is up.</li><li>
            If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key,
            is toggled if it is turned on. The key is off and untoggled if the low-order bit is 0.
            A toggle key's indicator light (if any) on the keyboard will be on when the key is toggled,
            and off when the key is untoggled.
            </li></ul><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div>
            The key status returned from this function changes as a thread reads key messages from its message queue.
            The status does not reflect the interrupt-level state associated with the hardware.
            Use the <span class="code">GetAsyncKeyState</span> function to retrieve that information.
            An application calls <span class="code">GetKeyState</span> in response to a keyboard-input message. This function retrieves
            the state of the key when the input message was generated.
            To retrieve state information for all the virtual keys, use the <span class="code">GetKeyboardState</span> function.
            An application can use the virtual key code constants
            <span class="code">VK_SHIFT</span>, <span class="code">VK_CONTROL</span>, and <span class="code">VK_MENU</span> as values for the <span class="code">nVirtKey</span> parameter.
            This gives the status of the SHIFT, CTRL, or ALT keys without distinguishing between left and right.
            <a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="T_SharpBlade_Native_WinAPI_User32_NativeMethods.htm" target="">User32<span id="ID0EBABAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABAAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>NativeMethods Class</a></div><div class="seeAlsoStyle"><a href="N_SharpBlade_Native_WinAPI.htm" target="">SharpBlade.Native.WinAPI Namespace</a></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p><a href="https://github.com/SharpBlade/SharpBlade" target="_blank">Project Page</a></p><p><a href="https://github.com/SharpBlade/SharpBlade/blob/master/LICENSE" target="_blank">Copyright (c) 2013-2014 by Adam Hellberg and Brandon Scott. (https://github.com/SharpBlade/SharpBlade/blob/master/LICENSE)</a></p><div class="OH_feedbacklink"><a href="mailto:info@sharpblade.net?subject=SharpBlade+documentation+User32.NativeMethods.GetKeyState+Method++100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to info@sharpblade.net.</div></div></body></html>